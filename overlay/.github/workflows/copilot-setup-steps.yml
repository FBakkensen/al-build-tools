name: Copilot Setup Steps
on:
  workflow_dispatch:

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # Repository checkout requires contents: read permission
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          # .NET 9 introduces the --format option required by scripts/make/download-compiler.ps1
          dotnet-version: '9.0.x'

      - name: Install jq for JSON processing
        run: |
          echo "=== Installing jq for JSON processing ==="
          sudo apt-get update
          sudo apt-get install -y jq
          echo "✓ jq installed: $(jq --version)"

      - name: Validate app.json exists
        run: |
          echo "=== Validating app.json exists ==="
          if [ ! -f "app.json" ]; then
            echo "Error: app.json not found"
            exit 1
          fi
          echo "✓ app.json found"

      - name: Validate prerequisites
        run: |
          echo "=== Validating prerequisites ==="

          # Check .NET SDK installation
          if ! command -v dotnet &> /dev/null; then
            echo "Error: .NET SDK not found"
            exit 1
          fi
          echo "✓ .NET SDK: $(dotnet --version)"

          # Check dotnet nuget availability
          if ! dotnet nuget --help &> /dev/null; then
            echo "Error: dotnet nuget not available"
            exit 1
          fi
          echo "✓ dotnet nuget: Available"

          # Check jq availability
          if ! command -v jq &> /dev/null; then
            echo "Error: jq not found"
            exit 1
          fi
          echo "✓ jq: $(jq --version)"

          # Check if Makefile exists
          if [ ! -f "Makefile" ]; then
            echo "Error: Makefile not found"
            exit 1
          fi
          echo "✓ Makefile: Found"

          # Check if make is available
          if ! command -v make &> /dev/null; then
            echo "Error: make command not found"
            exit 1
          fi
          echo "✓ make: Available"

          echo "✓ All prerequisites validated"

      - name: Download AL Compiler
        run: |
          echo "=== Downloading AL Compiler ==="
          if ! make download-compiler; then
            echo "Error: Failed to download AL compiler"
            echo "Available make targets:"
            make help
            exit 1
          fi
          echo "✓ AL compiler downloaded successfully"

      - name: Download BC Symbols
        run: |
          echo "=== Downloading BC Symbols ==="
          if ! make download-symbols; then
            echo "Error: Failed to download BC symbols"
            echo "This might be due to:"
            echo "  - Network connectivity issues"
            echo "  - Invalid version numbers in app.json"
            echo "  - Missing dependencies"
            exit 1
          fi
          echo "✓ BC symbols downloaded successfully"

      - name: Display environment summary
        run: |
          echo "=== Copilot AL Development Environment ==="
          echo "✓ .NET SDK: $(dotnet --version)"
          echo "✓ AL Compiler: Available at $(which alc || echo 'Not found')"

          # Count symbol packages in cache
          if [ -d "~/.bc-symbol-cache" ]; then
            # Count all .app files in the symbol cache (recursive search)
            SYMBOL_COUNT=$(find ~/.bc-symbol-cache -name "*.app" 2>/dev/null | wc -l)
            echo "✓ Symbols: $SYMBOL_COUNT .app files in cache"
          else
            echo "✓ Symbols: Cache directory not found"
          fi

          # Show project info from app.json (using jq)
          if [ -f "app.json" ]; then
            PROJECT_NAME=$(jq -r '.name // "Unknown"' app.json)
            PROJECT_VERSION=$(jq -r '.version // "Unknown"' app.json)
            echo "✓ Project: $PROJECT_NAME v$PROJECT_VERSION"
          fi

          # Show cache locations
          echo "✓ Tool Cache: ~/.bc-tool-cache/al/"
          echo "✓ Symbol Cache: ~/.bc-symbol-cache/"
          echo "========================================="
