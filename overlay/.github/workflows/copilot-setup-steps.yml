name: Copilot Setup Steps
on:
  workflow_dispatch:

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # Repository checkout requires contents: read permission
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          # .NET 9 introduces the --format option required by scripts/make/download-compiler.ps1
          dotnet-version: '9.0.x'

      - name: Install jq for JSON processing
        run: |
          set -e  # Exit on any error
          echo "=== Installing jq for JSON processing ==="
          sudo apt-get update
          sudo apt-get install -y jq
          echo "✓ jq installed: $(jq --version)"

      - name: Install InvokeBuild PowerShell module
        run: |
          set -e  # Exit on any error
          echo "=== Installing InvokeBuild PowerShell module ==="
          pwsh -Command "Install-Module -Name InvokeBuild -Force -Scope CurrentUser"
          echo "✓ InvokeBuild module installed"

      - name: Validate app.json exists
        run: |
          set -e  # Exit on any error
          echo "=== Validating app.json exists ==="
          if [ ! -f "app.json" ]; then
            echo "Error: app.json not found"
            exit 1
          fi
          echo "✓ app.json found"

      - name: Validate prerequisites
        run: |
          set -e  # Exit on any error
          echo "=== Validating prerequisites ==="

          # Check .NET SDK installation
          if ! command -v dotnet &> /dev/null; then
            echo "Error: .NET SDK not found"
            exit 1
          fi
          echo "✓ .NET SDK: $(dotnet --version)"

          # Check dotnet nuget availability
          if ! dotnet nuget --help &> /dev/null; then
            echo "Error: dotnet nuget not available"
            exit 1
          fi
          echo "✓ dotnet nuget: Available"

          # Check jq availability
          if ! command -v jq &> /dev/null; then
            echo "Error: jq not found"
            exit 1
          fi
          echo "✓ jq: $(jq --version)"

          # Check if al.build.ps1 exists
          if [ ! -f "al.build.ps1" ]; then
            echo "Error: al.build.ps1 not found"
            exit 1
          fi
          echo "✓ al.build.ps1: Found"

          # Check if Invoke-Build is available
          if ! pwsh -Command "Get-Module -ListAvailable -Name InvokeBuild" &> /dev/null; then
            echo "Error: Invoke-Build module not found"
            exit 1
          fi
          echo "✓ Invoke-Build: Available"

          echo "✓ All prerequisites validated"

      - name: Download AL Compiler
        id: download-al-compiler
        run: |
          set -e  # Exit on any error
          echo "=== Downloading AL Compiler ==="
          pwsh -Command "Invoke-Build download-compiler"
          echo "✓ AL compiler downloaded successfully"
        continue-on-error: false

      - name: Show available build targets on AL compiler failure
        if: failure() && steps.download-al-compiler.conclusion == 'failure'
        run: |
          echo "Error: Failed to download AL compiler"
          echo "Available build targets:"
          pwsh -Command "Invoke-Build ?" || echo "Could not list build targets"

      - name: Download BC Symbols
        id: download-bc-symbols
        run: |
          set -e  # Exit on any error
          echo "=== Downloading BC Symbols ==="
          pwsh -Command "Invoke-Build download-symbols"
          echo "✓ BC symbols downloaded successfully"
        continue-on-error: false

      - name: Show BC Symbols troubleshooting on failure
        if: failure() && steps.download-bc-symbols.conclusion == 'failure'
        run: |
          echo "Error: Failed to download BC symbols"
          echo "This might be due to:"
          echo "  - Network connectivity issues"
          echo "  - Invalid version numbers in app.json"
          echo "  - Missing dependencies"
          echo "  - PowerShell execution policy restrictions"

      - name: Display environment summary
        if: success()
        run: |
          set -e  # Exit on any error
          echo "=== Copilot AL Development Environment ==="
          echo "✓ .NET SDK: $(dotnet --version)"
          echo "✓ AL Compiler: Available at $(which alc || echo 'Not found')"

          # Count symbol packages in cache
          if [ -d "~/.bc-symbol-cache" ]; then
            # Count all .app files in the symbol cache (recursive search)
            SYMBOL_COUNT=$(find ~/.bc-symbol-cache -name "*.app" 2>/dev/null | wc -l)
            echo "✓ Symbols: $SYMBOL_COUNT .app files in cache"
          else
            echo "✓ Symbols: Cache directory not found"
          fi

          # Show project info from app.json (using jq)
          if [ -f "app.json" ]; then
            PROJECT_NAME=$(jq -r '.name // "Unknown"' app.json)
            PROJECT_VERSION=$(jq -r '.version // "Unknown"' app.json)
            echo "✓ Project: $PROJECT_NAME v$PROJECT_VERSION"
          fi

          # Show cache locations
          echo "✓ Tool Cache: ~/.bc-tool-cache/al/"
          echo "✓ Symbol Cache: ~/.bc-symbol-cache/"
          echo "========================================="

      - name: Setup failure summary
        if: failure()
        run: |
          echo "❌ GitHub Runner Setup Failed"
          echo "========================================="
          echo "One or more setup steps failed. Check the logs above for details."
          echo "Common issues:"
          echo "  - Network connectivity problems"
          echo "  - PowerShell execution policy restrictions"
          echo "  - Missing dependencies in app.json"
          echo "  - Invalid version numbers"
          echo "========================================="
          exit 1
