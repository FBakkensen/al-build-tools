name: Bootstrap Installer Test

on:
  workflow_dispatch:
    inputs:
      verbose:
        description: 'Enable verbose output'
        required: false
        type: boolean
        default: true

permissions:
  contents: read

env:
  POWERSHELL_TELEMETRY_OPTOUT: '1'

jobs:
  test-installer:
    name: Test Bootstrap Installer (Windows Container)
    # NOTE: Requires Windows host with Docker Desktop + Windows containers enabled.
    # Standard GitHub-hosted windows-latest runners do NOT have Docker with Windows container support.
    # This workflow is designed for self-hosted runners or manual local execution.
    # See specs/008-add-docker-install-test/quickstart.md for local testing instructions.
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Docker availability
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host '::group::Docker Environment Check'
          
          if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
            Write-Host '::error::Docker not found. This workflow requires Docker Desktop with Windows container support.'
            Write-Host '::notice::Standard GitHub-hosted windows-latest runners do not have Docker with Windows containers.'
            Write-Host '::notice::Please run this test locally or use a self-hosted runner. See quickstart.md for instructions.'
            exit 6
          }
          
          Write-Host 'Docker version:'
          docker --version
          
          Write-Host "`nDocker info:"
          docker info
          
          Write-Host '::endgroup::'

      - name: Run installer test harness
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host 'Running bootstrap installer test in Windows container...'
          
          $verboseFlag = if ('${{ inputs.verbose }}' -eq 'true') { '-Verbose' } else { '' }
          $cmd = "pwsh -File scripts/ci/test-bootstrap-install.ps1 $verboseFlag".Trim()
          
          Write-Host "Executing: $cmd"
          Invoke-Expression $cmd

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: installer-test-logs
          path: out/test-install/
          retention-days: 7
          if-no-files-found: warn

      - name: Echo failure summary on error
        if: failure()
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Continue'
          $summaryPath = 'out/test-install/summary.json'
          
          if (Test-Path $summaryPath) {
            Write-Host '::group::Installer Test Failure Summary'
            try {
              $summary = Get-Content -LiteralPath $summaryPath -Raw | ConvertFrom-Json -Depth 10
              
              if ($summary.errorSummary) {
                Write-Host "::error::$($summary.errorSummary)"
                Write-Host "`nError Summary: $($summary.errorSummary)"
              }
              
              if ($summary.exitCode) {
                Write-Host "`nExit Code: $($summary.exitCode)"
              }
              
              if ($summary.errorCategory) {
                Write-Host "Error Category: $($summary.errorCategory)"
              }
              
              if ($summary.lastCompletedStep) {
                Write-Host "Last Completed Step: $($summary.lastCompletedStep)"
              }
              
              if ($summary.failedPrerequisites -and $summary.failedPrerequisites.Count -gt 0) {
                Write-Host "`nFailed Prerequisites:"
                $summary.failedPrerequisites | ForEach-Object { Write-Host "  - $_" }
              }
              
              if ($summary.guardCondition) {
                Write-Host "`nGuard Condition: $($summary.guardCondition)"
              }
            }
            catch {
              Write-Host "::warning::Failed to parse summary.json: $_"
              Write-Host "`nRaw summary.json content:"
              Get-Content -LiteralPath $summaryPath | Write-Host
            }
            Write-Host '::endgroup::'
          }
          else {
            Write-Host "::warning::Summary file not found at $summaryPath"
          }
